MVC架构：
MVC 模型通过三个逻辑层来定义 web 应用程序：
business layer（业务层、模型逻辑）
display layer（显示层、视图逻辑）
input control（输入控件、控制器逻辑）
Model（模型）：数据保存     V - View（视图）：用户界面    C - Controller（控制）：业务逻辑
1.View传送指令到Controller -> 2.Controller完成业务逻辑后，要去Model改变状态 -> 3.Model将新的数据发送到View，用户得到反馈

模型（Model）
模型（Model）是应用程序中用于处理应用程序数据逻辑的部分。
通常模型对象在数据库中存取数据。
View（视图）
View（视图）是应用程序中处理数据显示的部分。
通常从模型数据中创建视图。
控制器
控制器是应用程序中处理用户交互的部分。
通常控制器从视图读取数据、控制用户输入，并向模型发送数据数据。

总的来说，Model层负责具体的业务逻辑处理，View最简单即显示层，而Controller作为控制器本质上是一个交互接口即管理数据的输入和输出，
若形而下地分析，以MVC web为例，给用户显示信息的网页是View层，但是丰富的web网页需要与用户交互即接收用户的请求、处理请求、返回响
应，即C/S结构下的HTTP请求，在这个过程里负责处理请求的这一块属于Model层，剩下的接收用户请求、返回响应就属于Controller了的。
View是显示层，而Controller并不呈现，因为View层不仅仅是显示信息，同时也为用户提供了一些交互的接口，这些接口是同时属于View层与
Controller的。
此外，在服务器端，有接收请求的入口，也有返回响应的出口，在服务器端，Controller是和Model层完全对接的，但这些服务器端的“接口”是逻
辑形式的，并非像前端那样可视化，但这些“接口”也是同时属于Controller和Model层的。

MVVM中的View 和 ViewModel可以互相通信。也就是可以互相调用。
MVC中的是单向通信。也就是View跟Model，必须通过Controller来承上启下
